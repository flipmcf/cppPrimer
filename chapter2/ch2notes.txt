exercise 2.1:

What are the differences between int, long, long long, and short?

--int, long and long long have different minimum storage sizes required by the C++ standard.  
16, 32 and 64 respectively, allowing them to store a larger range of values.
short and int both require at least 16 bits, so the difference between them is system and/or compiler dependent.

Between unsigned and signed:
  unsigned types represent only positive values, including zero.
  signed types represent values both negative and positive - generally equally balanced on both sides.
  
Between float and double:
  the number of _significant_digits_  (not scalar value) of double is larger than float.
  Standards say that floats carry a minimum of 6 sig digits, doubles have 10.
  
  
-----
To calculate a morgage payment, what types would you use for:
rate: double   (need 5, maybe 6 significant figures:  xx.xxxx)
principal: double
payment: double 

Basically, you need to be able to hold a decimal, and round to the nearest tenth of a penny, 
and display to the penny.

----------

exercise 2.23:  Predict the output:

unsigned u = 10, u2 = 42;
//noting that both are unsigned int's

std::cout << u2 - u << std::endl;
//This will output 32, becaue u < u2

std::cout << u - u2 << std::endl;
//This output is guaranteed to be a 'big, positive number' 
// because the output will also be an unsigned.
//  I guess, on my system, the answer will be the 32-bit 2's complement of the signed integer (-32)
//  4294967265
//  (but one cannot rely on this)

int i = 10, i2 = 42 // ok, now we have signed int's

std::cout << i2 - i << std::endl; // 32 
std::cout << i - i2 << std::endl; // -32 (yea signed!)

std::cout << i - u << std::endl; // 32
std::cout << u - i << std::endl;  //oops, but probably ok, barely.  result is 0.
