Notes from exercise 1:
    
I am using Linux.

My C++ compiler is `g++`

and I'm able to compile with:
  `g++ -o <output filename> <source file>`
  
and run with:
   `./<output filename>`
   
(I don't like using 'a.out' as a default filename.)

-----
on the shell, `echo ?$` gives you the return code (see ex1.cpp)

Return codes in BASH are postive, 8-bit numbers, so `return -1` will yeild the 2's complement postive # of 255

-------
exercise 1.5 asks: "Why is this code illegial":

  std::cout << "The sum of " << v1;
            << "and " << v2;  
            
  it's illegial because you terminate the statement with a ';' on line 1
  Line 2 therefore has no lvalue for the '<<' operator encountered as the first token
   (that's a guess, I didn't actually try to run it.)
   
   pretty easy to fix - just remove the semi's
   
-----
exercise 1.8 asks:   "Which of the following output statement are legal":

I predict: ` cout << "/*";  ` is legal -because the "comment start" is inside a string literal, where tabs & spaces are considered string literals
Also, ` cout << "*/"; `  is legal, because the comment end does not appear inside a comment block

the others will be illegial, because they all contain a `*/` inside a comment block, the fact they are inside quotes doesn't help.

(now, off to try it out)

Well, the third also compiled and is legal... I should have seen that.
   std::cout << /*  "*/" /*  "/*"   */;
But "don't do that"
  The first quote is part of a comment.
  The second quote that looks like a close-quote is actually an open quote.
hey, READABILITY COUNTS!  But maybe that's not part of the zen of C++


==== 
Exercise 1.12 asks: "What does this loop do":

int sum = 0;
for (int i = -100; i <= 100; ++i)
    sum += i;
    
The loop will add up all the #'s between -100 and 100 and store the value in 'sum'

The final value should be zero:
   Sum of numbers from -100 to 100 is equal to:
     the sum of the numbers from -100 to 0 plus the sum of the numbers from 0 to 100
     These two sums are equal, except for the sign.  One will be negative and the other positve.
     Adding the same value to itself, with one of those values being negative, is Zero.
     
     